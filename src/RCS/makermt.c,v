head	1.16;
access;
symbols;
locks; strict;
comment	@ * @;


1.16
date	2010.01.29.16.45.36;	author shimo;	state Exp;
branches;
next	1.15;

1.15
date	2007.03.24.00.57.22;	author shimo;	state Exp;
branches;
next	1.14;

1.14
date	2005.09.20.07.58.03;	author shimo;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.30.13.48.34;	author shimo;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.18.16.29.49;	author shimo;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.20.08.55.13;	author shimo;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.10.02.51.10;	author shimo;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.10.06.01.59;	author shimo;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.08.01.22.04;	author shimo;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.29.06.28.38;	author shimo;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.16.22.14.24;	author shimo;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.14.45.02;	author shimo;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.05.09.11.22;	author shimo;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.16.07.01.51;	author shimo;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.12.05.43.30;	author shimo;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.11.23.27.19;	author shimo;	state Exp;
branches;
next	;


desc
@@


1.16
log
@accepts phyml
@
text
@/*

  makermt.c : make rmt-file by the RELL method

  Time-stamp: <2010-01-30 01:43:55 shimo>

  shimo@@is.titech.ac.jp
  Hidetoshi Shimodaira

  typical usage:
  # sample.pa and foo.mt -> foo.rmt
  makermt -p sample foo
  # sample.pa and foo.mt -> foo.rmt and aho.vt 
  makermt -p sample foo aho
  # foo.svt -> aho1.rmt aho2.rmt (foo.svt = aho1 aho2)
  makermt -g foo

*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "rand.h"
#include "misc.h"
#include "freadmat.h"

static const char rcsid[] = "$Id: makermt.c,v 1.15 2007/03/24 00:57:22 shimo Exp shimo $";


/*
  Scaleboot simply generates the bb replicates of sample size bn. The
  original data have n samples of m items. Each replicate is
  calculated as the sum of the bn vectors of size n.
*/
double **scaleboot(double **datmat, /* m x n data matrix */
		   double **repmat, /* m x bb output */
		   int m,  /* number of items */
		   int n,  /* original sample size */
		   int bn, /* replicate sample size */
		   int bb  /* number of bootstrap replicates */
		   ) {
  int i,j,k;
  double *wv,*rv,*xp;
  double r;

  wv=new_vec(n); rv=new_vec(bn);
  if(repmat==NULL) repmat=new_mat(m,bb);
  r=(double)bn/(double)n;

  for(i=0;i<bb;i++) {
    /* first, get wv=weight vector */
    mrandlist(rv,bn);
    for(j=0;j<n;j++) wv[j]=0.0;
    for(j=0;j<bn;j++) {
      k = (int) (rv[j]*n);
      if(k<0) {  /* for safety */
	k=0; warning("negative? in rand");
      } else if(k>=n) {
	k=n-1; warning("unity? in rand");
      }
      wv[k] += 1.0;
    }

    /* then, summing up datmat with the weights */
    for(k=0;k<m;k++) {
      register int j; register double x;
      xp=datmat[k]; x=0.0;
      for(j=0;j<n;j++) x+=wv[j]*xp[j]; /* <- time consuming */
      repmat[k][i]=x/r; /* rescaling with 1/r */
    }
  }

  free_vec(wv); free_vec(rv);
  return repmat;
}

void putdot() {putchar('.'); fflush(STDOUT);}
void byebye() {error("error in command line");}

unsigned long seed=0;
char *fname_pa = NULL;
char *fname_mt = NULL;
char *fname_rmt = NULL;
char *fname_vt = NULL;
char *fname_svt = NULL;
char *fext_pa = ".pa";
char *fext_rmt = ".rmt";
char *fext_vt = ".vt";
char *fext_svt = ".svt";

double bbfact=1.0;

/* msboot parameter */
int kk,*bb,*bn;
double *rr,*rr1;
int kk0=10;
double rr0[]={0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4};
int bb0[]={10000,10000,10000,10000,10000,10000,10000,10000,10000,10000};
double rr00[]={1.0}; int bb00[]={10000}; int kk00=1; 
int sw_fastrep=0;
int sw_multi=0;

double **datmat=NULL;
int mm=0; int nn=0;
double **repmat=NULL;
double *datvec=NULL;


int genrmt(char *infile, char *outfile)
{
  int i,j;
  FILE *fp;
  double x,t0,t1;
  char *cbuf,*fext;

  /* open file */
  switch(seqmode) {
  case SEQ_MOLPHY: fext=fext_molphy; break;
  case SEQ_PAML: fext=fext_paml; break;
  case SEQ_PAUP: fext=fext_paup; break;
  case SEQ_PUZZLE: fext=fext_puzzle; break;
  case SEQ_PHYML: fext=fext_phyml; break;
  case SEQ_MT: 
  default: fext=fext_mt; break;
  }
  if(infile) {
    fp=openfp(infile,fext,"r",&cbuf);
    printf("\n# reading %s",cbuf);
  } else {
    fp=STDIN;
    printf("\n# reading from stdin");
  }

  /* read file */
  mm=nn=0;
  switch(seqmode) {
  case SEQ_MOLPHY: 
    datmat = fread_mat_lls(fp, &mm, &nn); break;
  case SEQ_PAML: 
    datmat = fread_mat_lfh(fp, &mm, &nn); break;
  case SEQ_PAUP: 
    datmat = fread_mat_paup(fp, &mm, &nn); break;
  case SEQ_PUZZLE: 
    datmat = fread_mat_puzzle(fp, &mm, &nn); break;
  case SEQ_PHYML: 
    datmat = fread_mat_phyml(fp, &mm, &nn); break;
  case SEQ_MT: 
  default: 
    datmat = fread_mat(fp, &mm, &nn); break;  
  }
  if(infile) {fclose(fp);  FREE(cbuf);}
  printf("\n# M:%d N:%d",mm,nn);

  /* allocating buffers */
  datvec=new_vec(mm);
  bn=new_ivec(kk); rr1=new_vec(kk);

  /* calculate the log-likelihoods */
  for(i=0;i<mm;i++) {
    x=0; for(j=0;j<nn;j++) x+=datmat[i][j];
    datvec[i]=x;
  }
  
  /* calculate scales */
  for(i=0;i<kk;i++) {
    bn[i]=(int)(rr[i]*nn); /* sample size for bootstrap */
    rr1[i]=(double)bn[i]/nn; /* recalculate rr for integer adjustment */
  }

  /* open out file */
  if(outfile) {
    /* vt ascii write to file */
    fp=openfp(outfile,fext_vt,"w",&cbuf);
    printf("\n# writing %s",cbuf);
    fwrite_vec(fp,datvec,mm);
    fclose(fp); FREE(cbuf);
    /* rmt binary write to file */
    fp=openfp(outfile,fext_rmt,"wb",&cbuf);
    printf("\n# writing %s",cbuf);
    fwrite_bvec(fp,datvec,mm);
    fwrite_bvec(fp,rr1,kk);
    fwrite_bivec(fp,bb,kk);
    fwrite_bi(fp,kk);
  } else {
    /* rmt ascii write to stdout */
    printf("\n# writing to stdout");
    printf("\n# OBS:\n"); write_vec(datvec,mm);
    printf("\n# R:\n"); write_vec(rr1,kk);
    printf("\n# B:\n"); write_ivec(bb,kk);
    printf("\n# RMAT:\n");
    printf("%d\n",kk);
  }


  /* generating the replicates by resampling*/
  for(i=j=0;i<kk;i++) j+=bb[i];
  printf("\n# start generating total %d replicates for %d items",j,mm);
  fflush(STDOUT);
  t0=get_time();

  for(i=0;i<kk;i++) {
    repmat=new_lmat(mm,bb[i]);
    scaleboot(datmat,repmat,mm,nn,bn[i],bb[i]);
    if(outfile) {
      fwrite_bmat(fp,repmat,mm,bb[i]);
      putdot();
    } else {
      printf("\n## RMAT[%d]:\n",i); write_mat(repmat,mm,bb[i]);
    }
    free_lmat(repmat,mm);
  }

  t1=get_time();
  printf("\n# time elapsed for bootstrap t=%g sec",t1-t0);

  if(outfile) {
    fclose(fp); FREE(cbuf);
  }

  /* freeing buffers */
  free_vec(bn); free_vec(rr1); free_vec(datvec); free_mat(datmat);

  return 0;
}


int main(int argc, char** argv)
{
  /* working variables */
  int i,j,mf;
  FILE *fp;
  char *cbuf,**infiles,**outfiles;

  printf("# %s",rcsid);

  /* args */
  for(i=j=1;i<argc;i++) {
    if(argv[i][0] != '-') {
      switch(j) {
      case 1: fname_mt=argv[i]; break;
      case 2: fname_rmt=argv[i]; break;
      default: byebye();
      }
      j++;
    } else if(streq(argv[i],"-s")) {
      if(i+1>=argc ||
	 sscanf(argv[i+1],"%lu",&seed) != 1)
	byebye();
      i+=1;
    } else if(streq(argv[i],"-p")) {
      if(i+1>=argc) byebye();
      fname_pa=argv[i+1];
      i+=1;
    } else if(streq(argv[i],"-b")) {
      if(i+1>=argc ||
	 sscanf(argv[i+1],"%lf",&bbfact) != 1)
	byebye();
      i+=1;
    } else if(streq(argv[i],"-f")) {
      sw_fastrep=1;
    } else if(streq(argv[i],"-g")) {
      sw_multi=1;
    } else if(streq(argv[i],"--molphy")) {
      seqmode=SEQ_MOLPHY;
    } else if(streq(argv[i],"--paml")) {
      seqmode=SEQ_PAML;
    } else if(streq(argv[i],"--paup")) {
      seqmode=SEQ_PAUP;
    } else if(streq(argv[i],"--puzzle")) {
      seqmode=SEQ_PUZZLE;
    } else if(streq(argv[i],"--phyml")) {
      seqmode=SEQ_PHYML;
    } else if(streq(argv[i],"-d")) {
      if(i+1>=argc ||
	 sscanf(argv[i+1],"%d",&debugmode) != 1)
	byebye();
      i+=1;
    } else byebye();
  }

  /* random seed */
  smrand(seed);

  /* reading parameters */
  if(fname_pa!=NULL) {
    fp=openfp(fname_pa,fext_pa,"r",&cbuf);
    printf("\n# reading %s",cbuf);
    kk=0;
    rr=fread_vec(fp,&kk); 
    bb=fread_ivec(fp,&kk); 
    fclose(fp); FREE(cbuf);
  } else {
    if(sw_fastrep) {kk=kk00; rr=rr00; bb=bb00;}
    else {kk=kk0; rr=rr0; bb=bb0;}
  }

  for(i=0;i<kk;i++) bb[i] *= bbfact;
  printf("\n# seed:%lu (MT19937 generator)",seed);
  printf("\n# K:%d",kk);
  printf("\n# R:"); for(i=0;i<kk;i++) printf("%g ",rr[i]);
  printf("\n# B:"); for(i=0;i<kk;i++) printf("%d ",bb[i]);

  if(sw_multi) {
    if(fname_mt) fp=openfp(fname_mt,fext_svt,"r",&cbuf); else fp=STDIN;
    mf=0; infiles=fread_svec(fp,&mf);
    if(fname_mt) {fclose(fp); FREE(cbuf);}
    if(fname_rmt) {
      fp=openfp(fname_rmt,fext_svt,"r",&cbuf);
      outfiles=fread_svec(fp,&mf);
      fclose(fp); FREE(cbuf);
    } else {
      outfiles=NEW_A(mf,char*);
      for(i=0;i<mf;i++) outfiles[i]=rmvaxt(infiles[i]);
    }
    for(i=0;i<mf;i++) {
      printf("\n# %d/%d %s %s",i+1,mf,infiles[i],outfiles[i]);
      genrmt(infiles[i],outfiles[i]);
    }
  } else {
    if(fname_mt && !fname_rmt) fname_rmt=rmvaxt(fname_mt);
    genrmt(fname_mt,fname_rmt);
  }

  printf("\n# exit normally\n");
  exit(0);
}
@


1.15
log
@accept -d 2 option for file checking
@
text
@d5 1
a5 1
  Time-stamp: <2007-03-24 09:55:40 shimo>
d7 1
a7 1
  shimo@@ism.ac.jp 
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.14 2005/09/20 07:58:03 shimo Exp shimo $";
d122 1
d145 2
d271 2
@


1.14
log
@accepts tree-puzzle format
@
text
@d5 1
a5 1
  Time-stamp: <2005-09-20 16:39:18 shimo>
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.13 2002/08/30 13:48:34 shimo Exp shimo $";
d268 5
@


1.13
log
@-b option for multiplying bb
@
text
@d5 1
a5 1
  Time-stamp: <2002-08-30 22:41:40 shimo>
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.12 2002/04/18 16:29:49 shimo Exp shimo $";
a86 1
char *fext_mt = ".mt";
a90 6
enum seqfile {SEQ_MT, SEQ_MOLPHY, SEQ_PAML, SEQ_PAUP};
int seqmode=SEQ_MT;
char *fext_molphy=".lls";
char *fext_paml=".lnf";
char *fext_paup=".txt";

d121 1
d142 2
d266 2
@


1.12
log
@reduce memory usage
@
text
@d5 1
a5 1
  Time-stamp: <2002-04-18 16:38:52 shimo>
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.11 2002/02/20 08:55:13 shimo Exp shimo $";
d80 1
a80 1
int seed=123;
d98 2
d248 1
a248 1
	 sscanf(argv[i+1],"%d",&seed) != 1)
d255 5
d288 3
a290 1
  printf("\n# seed:%d",seed);
@


1.11
log
@generate multiple rmt files
@
text
@d5 1
a5 1
  Time-stamp: <2002-02-17 21:11:45 shimo>
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.10 2002/01/10 02:51:10 shimo Exp shimo $";
d110 1
a110 1
double ***repmats=NULL;
a154 2
  repmats=(double ***)MALLOC((sizeof(double **))*kk);
  for(i=0;i<kk;i++) repmats[i]=new_lmat(mm,bb[i]);
d162 2
a163 6

  /* generating the replicates by resampling*/
  for(i=j=0;i<kk;i++) j+=bb[i];
  printf("\n# start generating total %d replicates for %d items",j,mm);
  fflush(STDOUT);
  t0=get_time();
a166 2
    scaleboot(datmat,repmats[i],mm,nn,bn[i],bb[i]);
    putdot();
a167 2
  t1=get_time();
  printf("\n# time elapsed for bootstrap t=%g sec",t1-t0);
d169 1
a169 1
  /* saving the results */
a182 5
    for(i=0;i<kk;i++) {
      fwrite_bmat(fp,repmats[i],mm,bb[i]);
      putdot();
    }
    fclose(fp); FREE(cbuf);
d191 17
a207 2
    for(i=0;i<kk;i++) {
      printf("\n## RMAT[%d]:\n",i); write_mat(repmats[i],mm,bb[i]);
d209 8
a220 2
  for(i=0;i<kk;i++) free_lmat(repmats[i],mm);
  FREE(repmats);
@


1.10
log
@-f option to change the default value: r1=1, B1=10000, K=1.
@
text
@d5 1
a5 1
  Time-stamp: <2002-01-10 11:29:28 shimo>
d15 2
d27 1
a27 1
static const char rcsid[] = "$Id: makermt.c,v 1.9 2001/08/10 06:01:59 shimo Exp shimo $";
d85 1
d90 1
a96 1
int sw_lmat=0;
d100 1
a100 1
double *rr;
d106 1
d109 1
a109 1
int mm; int nn;
d114 1
a114 1
int main(int argc, char** argv)
a115 1
  /* working variables */
d117 1
a118 1
  FILE *fp;
a120 57
  printf("# %s",rcsid);

  /* args */
  for(i=j=1;i<argc;i++) {
    if(argv[i][0] != '-') {
      switch(j) {
      case 1: fname_mt=argv[i]; break;
      case 2: fname_rmt=argv[i]; break;
      default: byebye();
      }
      j++;
    } else if(streq(argv[i],"-s")) {
      if(i+1>=argc ||
	 sscanf(argv[i+1],"%d",&seed) != 1)
	byebye();
      i+=1;
    } else if(streq(argv[i],"-p")) {
      if(i+1>=argc) byebye();
      fname_pa=argv[i+1];
      i+=1;
    } else if(streq(argv[i],"-l")) {
      if(i+1>=argc) byebye();
      fname_vt=argv[i+1];
      i+=1;
    } else if(streq(argv[i],"-f")) {
      sw_fastrep=1;
    } else if(streq(argv[i],"-L")) {
      sw_lmat=1;
    } else if(streq(argv[i],"--molphy")) {
      seqmode=SEQ_MOLPHY;
    } else if(streq(argv[i],"--paml")) {
      seqmode=SEQ_PAML;
    } else if(streq(argv[i],"--paup")) {
      seqmode=SEQ_PAUP;
    } else byebye();
  }

  /* random seed */
  smrand(seed);

  /* reading parameters */
  if(fname_pa!=NULL) {
    fp=openfp(fname_pa,fext_pa,"r",&cbuf);
    printf("\n# reading %s",cbuf);
    kk=0;
    rr=fread_vec(fp,&kk); putdot();
    bb=fread_ivec(fp,&kk); putdot();
    fclose(fp); FREE(cbuf);
  } else {
    if(sw_fastrep) {kk=kk00; rr=rr00; bb=bb00;}
    else {kk=kk0; rr=rr0; bb=bb0;}
  }
  printf("\n# seed:%d",seed);
  printf("\n# K:%d",kk);
  printf("\n# R:"); for(i=0;i<kk;i++) printf("%g ",rr[i]);
  printf("\n# B:"); for(i=0;i<kk;i++) printf("%d ",bb[i]);

d129 2
a130 2
  if(fname_mt) {
    fp=openfp(fname_mt,fext,"r",&cbuf);
d150 1
a150 1
  if(fname_mt) {fclose(fp);  FREE(cbuf);}
d156 2
a157 2
  for(i=0;i<kk;i++) repmats[i]=sw_lmat?new_lmat(mm,bb[i]):new_mat(mm,bb[i]);
  bn=new_ivec(kk);
d172 1
a172 1
    rr[i]=(double)bn[i]/nn; /* recalculate rr for integer adjustment */
d180 3
a182 2
  if(fname_vt!=NULL) {
    fp=openfp(fname_vt,fext_vt,"w",&cbuf);
d186 2
a187 4
  }
  if(fname_mt && !fname_rmt) fname_rmt=rmvaxt(fname_mt);  
  if(fname_rmt!=NULL) { /* binary write to file */
    fp=openfp(fname_rmt,fext_rmt,"wb",&cbuf);
d190 1
a190 1
    fwrite_bvec(fp,rr,kk);
d197 3
a199 2
    fclose(fp);
  } else { /* ascii write to stdout */
d202 1
a202 1
    printf("\n# R:\n"); write_vec(rr,kk);
d209 90
@


1.9
log
@lmat, lfh->lnf
@
text
@d5 1
a5 1
  Time-stamp: <2001-06-23 14:24:04 shimo>
d25 1
a25 1
static const char rcsid[] = "$Id: makermt.c,v 1.8 2001/06/08 01:22:04 shimo Exp shimo $";
d101 2
d142 2
d167 2
a168 1
    kk=kk0; rr=rr0; bb=bb0; 
@


1.8
log
@binary mode for dos
@
text
@d5 1
a5 1
  Time-stamp: <2001-06-01 07:50:38 shimo>
d25 1
a25 1
static const char rcsid[] = "$Id: makermt.c,v 1.7 2001/05/29 06:28:38 shimo Exp shimo $";
d91 1
a91 1
char *fext_paml=".lfh";
d93 1
d107 1
d140 2
d205 1
a205 1
  for(i=0;i<kk;i++) repmats[i]=new_mat(mm,bb[i]);
@


1.7
log
@accept the site-wise log-likelihoods of molphy, paml, and paup.
@
text
@d5 1
a5 1
  Time-stamp: <2001-05-29 14:21:08 shimo>
d25 1
a25 1
static const char rcsid[] = "$Id: makermt.c,v 1.6 2001/05/16 22:14:24 shimo Exp shimo $";
d233 1
a233 1
    fp=openfp(fname_rmt,fext_rmt,"w",&cbuf);
@


1.6
log
@changed to use openfp in misc.c
@
text
@d5 1
a5 1
  Time-stamp: <2001-05-16 08:30:11 shimo>
d19 1
d23 1
d25 1
a25 1
static const char rcsid[] = "$Id: makermt.c,v 1.5 2001/05/05 14:45:02 shimo Exp shimo $";
d41 1
a41 1
  double x,*wv,*rv;
d64 3
a66 2
      x=0.0;
      for(j=0;j<n;j++) x+=wv[j]*datmat[k][j];
d88 6
d112 1
a112 1
  char *cbuf;
d120 1
a120 1
      case 1: fname_mt=fname_rmt=argv[i]; break;
d138 6
d166 10
a175 4
  /* reading datmat */
  mm=nn=0;
  if(fname_mt!=NULL) {
    fp=openfp(fname_mt,fext_mt,"r",&cbuf);
a176 2
    datmat=fread_mat(fp,&mm,&nn);
    fclose(fp); FREE(cbuf);
d178 1
a179 1
    datmat=fread_mat(STDIN,&mm,&nn);
d181 15
d231 1
@


1.5
log
@changed default value of bb[i] from 1000 to 10000
@
text
@d5 1
a5 1
  Time-stamp: <2001-05-05 23:42:20 shimo>
d23 1
a23 1
static const char rcsid[] = "$Id: makermt.c,v 1.4 2001/05/05 09:11:22 shimo Exp shimo $";
d103 1
d137 2
a138 3
    fname_pa = mstrcat(fname_pa,fext_pa);
    if((fp=fopen(fname_pa,"r"))==NULL) error("cant open %s",fname_pa);
    printf("\n# reading %s",fname_pa);
d142 1
a142 1
    fclose(fp);
d154 2
a155 3
    fname_mt = mstrcat(fname_mt,fext_mt);
    if((fp=fopen(fname_mt,"r"))==NULL) error("cant open %s",fname_mt);
    printf("\n# reading %s",fname_mt);
d157 1
a157 1
    fclose(fp);
d192 2
a193 3
    fname_vt = mstrcat(fname_vt,fext_vt);
    if((fp=fopen(fname_vt,"w"))==NULL) error("cant open %s",fname_vt);
    printf("\n# writing %s",fname_vt);
d195 1
a195 1
    fclose(fp);
d198 2
a199 3
    fname_rmt = mstrcat(fname_rmt,fext_rmt);
    if((fp=fopen(fname_rmt,"w"))==NULL) error("cant open %s",fname_rmt);
    printf("\n# writing %s",fname_rmt);
@


1.4
log
@replicates are now properly rescaled in accordance with rr
@
text
@d5 1
a5 1
  Time-stamp: <2001-04-19 09:22:33 shimo>
d23 1
a23 1
static const char rcsid[] = "$Id: makermt.c,v 1.3 2001/04/16 07:01:51 shimo Exp shimo $";
d64 1
a64 1
      repmat[k][i]=x/r;
a71 2


d90 1
a90 1
int bb0[]={1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
d138 1
a138 1
    printf("\n# reading %s.",fname_pa);
d156 2
a157 2
    printf("\n# reading %s.",fname_mt);
    datmat=fread_mat(fp,&mm,&nn); putdot();
d160 2
a161 2
    printf("\n# reading from stdin.");
    datmat=fread_mat(STDIN,&mm,&nn); putdot();
d195 2
a196 2
    printf("\n# writing %s.",fname_vt);
    fwrite_vec(fp,datvec,mm); putdot();
d199 1
a199 1
  if(fname_rmt!=NULL) {
d202 1
a202 1
    printf("\n# writing %s.",fname_rmt);
d212 3
a214 3
  } else {
    printf("\n# writing to stdout.");
    printf("\n# L:\n"); write_vec(datvec,mm);
@


1.3
log
@print elapsed time
@
text
@d5 1
a5 1
  Time-stamp: <2001-04-16 15:02:30 shimo>
d23 1
a23 1
static const char rcsid[] = "$Id: makermt.c,v 1.2 2001/04/12 05:43:30 shimo Exp shimo $";
d40 1
d44 1
a46 1

d64 1
a64 1
      repmat[k][i]=x;
d74 2
a75 4
void byebye()
{
  error("error in command line");
}
d142 2
a143 2
    rr=fread_vec(fp,&kk); putchar('.');
    bb=fread_ivec(fp,&kk); putchar('.');
d159 1
a159 1
    datmat=fread_mat(fp,&mm,&nn); putchar('.');
d163 1
a163 1
    datmat=fread_mat(STDIN,&mm,&nn); putchar('.');
d188 1
d198 1
a198 1
    fwrite_vec(fp,datvec,mm); putchar('.');
d211 1
a211 1
      putchar('.');
@


1.2
log
@# minor correction
@
text
@d5 1
a5 1
  Time-stamp: <2001-04-12 14:21:24 shimo>
d23 1
a23 1
static const char rcsid[] = "$Id: makermt.c,v 1.1 2001/04/11 23:27:19 shimo Exp shimo $";
d104 1
a104 1
  double x;
d173 1
a173 1
  
d181 4
d190 2
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
  Time-stamp: <2001-04-12 08:19:12 shimo>
d23 1
a23 1
static const char rcsid[] = "$Id$";
d39 1
a39 1
  double x,*xv,*wv,*rv;
d41 1
a41 1
  xv=new_vec(m); wv=new_vec(n); rv=new_vec(bn);
d67 1
a67 1
  free_vec(xv);
d202 1
d214 1
@
